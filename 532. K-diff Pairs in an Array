/*
2 approaches==> map and two pointers(sorting)
*/


// Map
// TC: O(n) SC:(n)
class Solution {
public:
    int findPairs(vector<int>& nums, int k) {

        unordered_map<int, int> mpp;
        for (int num : nums) mpp[num]++;

        int cnt = 0;
        for (auto& it : mpp) {
            int num = it.first;
            if (k == 0) {
                if (it.second > 1) cnt++;  
            } else {
                if (mpp.find(num + k) != mpp.end()) cnt++;
            }
        }
        return cnt;
    }
};

// Sorting + two pointers
// TC:O(nlogn) SC:O(1)

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {

        int cnt = 0; 
        int n = nums.size() ; 

        int i =0 ; 
        int j = 1; 
        sort(nums.begin() , nums.end()) ; 

        while (i < n && j < n) {
            if (i == j || nums[j] - nums[i] < k) {
                j++;
            } 
            else if (nums[j] - nums[i] > k) {
                i++;
            } 
            else {
                cnt++;
                i++;
                j++;
                while (j < n && nums[j] == nums[j - 1]) {
                    j++ ; 
                } 
            }
        }
        


        return cnt;
    }
};

