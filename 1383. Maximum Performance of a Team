/*
heap question. the way to identify heap questions is to look for constraints(obv) and search for keywords like "maximum" or "minimum". though this question can be confused 
for a MCM question but as K value is variable we can be sure that it is not a MCM problem.

Now, the key is to maximise the product of efficiency and sum of speeds, so we sort the efficiency array in descending order.
then use a minheap to always satisfy the property of min(efficiency).

TC: O(NlogN)
SC: O(N)
*/


class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        const int MOD = 1e9 + 7;

        vector<pair<int,int>> v;
        for(int i = 0; i < n; i++) {
            v.push_back({efficiency[i], speed[i]});
        }

        sort(v.rbegin(), v.rend());
        long long ans = 0 ; 
        long long sum = 0 ;

        priority_queue<int, vector<int>, greater<int>> minHeap; 

        for(auto& [ef , spd]  : v) {
            sum += spd ;

            minHeap.push(spd) ; 

            if(minHeap.size() > k) {
                sum -= minHeap.top() ;
                minHeap.pop() ;
            }

            ans = max(ans , sum * ef) ;
        }

        return ans % MOD ; 

        
    }
};
