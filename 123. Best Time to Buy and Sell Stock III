class Solution {
public:
    int dp[100005][3][2];
    int helper(int i, int cnt, bool canBuy, vector<int>& prices, int n) {
        if (i == n || cnt == 2)
            return 0;
        if (dp[i][cnt][canBuy] != -1)
            return dp[i][cnt][canBuy];

        int profit = 0;
        if (canBuy) {
            int buy = -prices[i] + helper(i + 1, cnt, false, prices, n);
            int skip = helper(i + 1, cnt, true, prices, n);
            profit = max(buy, skip);
        } else {
            int sell =
                prices[i] + helper(i + 1, cnt + 1, true, prices, n);
            int skip = helper(i + 1, cnt, false, prices, n);
            profit = max(sell, skip);
        }

        return dp[i][cnt][canBuy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        memset(dp, -1, sizeof(dp));

        return helper(0, 0, true, prices, n);
    }
};
