/*Standard string question solved by sorting,that can be optimized by using hashmap, intuitive problem
POTD: 9/11/2025  ✈︎ 🏢🏢
*/


// TC: O(nlogn) , SC: O(1)
class Solution {
public:
    string sortVowels(string s) {
         int n = s.size() ; 
         string t = "" ; 

         vector<char>v ; 

         for(int i = 0 ; i < n ; i++) {
             if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i]!= 'A' && 
            s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {
                continue ; 
            }
            else {
              v.push_back(s[i]) ; 
 
            }
           
         }

         sort(v.begin() , v.end()) ; 
         int j = 0 ;

         for(int i = 0 ; i < n; i++) {
            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i]!= 'A' && 
            s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {
                t += s[i] ;
            }
            else {
                t += v[j] ;
                j++ ; 
            }
         }

         return t ; 
    }
};


// TC: O(n) , SC: O(n)

class Solution {
public:
    string sortVowels(string s) {
         int n = s.size() ; 
         string t = "" ; 

        unordered_map<char, int> v;

         for(int i = 0 ; i < n ; i++) {
             if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i]!= 'A' && 
            s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {
                continue ; 
            }
            else {
              v[s[i]]++ ; 
 
            }
           
         }

        string checker = "AEIOUaeiou"; 
         int j = 0 ;

         for(int i = 0 ; i < n; i++) {
            if(s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i]!= 'A' && 
            s[i] != 'E' && s[i] != 'I' && s[i] != 'O' && s[i] != 'U') {
                t += s[i] ;
            }
            else {
                while(v[checker[j]] == 0 ) {
                    j++ ; 
                } 
                t += checker[j] ; 
                v[checker[j]]-- ; 
            }
         }

         return t ; 
    }
};

