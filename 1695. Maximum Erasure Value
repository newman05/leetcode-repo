// The way to approach this question is to check the constrains and then figure out that, as it requires some operation on an array, it is most likely a two pointer question.
// Moreover as we need to get a "max" sum, this would require us to keep track of sum throughout the array, which requires some space, hence a map.

// MAP + Two Pointers 


class Solution {
public:
    int maximumUniqueSubarray(vector<int>& nums) {
        unordered_map<int, int> freq;
        int j = 0, sum = 0, maxSum = 0;

        for (int i = 0; i < nums.size(); ++i) {
            freq[nums[i]]++;
            sum += nums[i];

            while (freq[nums[i]] > 1) {
                freq[nums[j]]--;
                sum -= nums[j];
                j++;
            }

            maxSum = max(maxSum, sum);
        }

        return maxSum;
    }
};
