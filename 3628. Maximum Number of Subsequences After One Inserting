class Solution {
public:
    long long numOfSubsequences(string s) {
        int n = s.size() ; 
        long long countL = 0 , countLC = 0 , countLCT = 0; 

        for(auto x : s) {
            if(x == 'L') {
                countL++ ; 
            }
            else if(x == 'C') {
                countLC += countL ;
            }
            else if(x == 'T') {
                countLCT += countLC ; 
            }
        }

        vector<long long> suffixT (n + 1, 0) ; 
        vector<long long> suffixCT (n + 1, 0) ; 

        for(int i = n - 1; i >= 0 ; i--) {
            char ch = s[i] ; 
            suffixT[i] = suffixT[i + 1] ;
            suffixCT[i] = suffixCT[i +1] ;
            if(s[i] == 'T') suffixT[i]++ ; 
            if(s[i] == 'C') suffixCT[i] += suffixT[i]; 
        }

        long long ans = 0; 
        long long prefixL = 0 ; 
        long long prefixLC =0; 

        for(int i = 0 ;i <= n ; i++) {
            ans = max(ans , suffixCT[i]) ; 
            ans = max(ans , prefixL * suffixT[i]) ; 
            ans = max(ans , prefixLC) ; 
            if(i < n) {
                char c = s[i] ; 
                if( c == 'L')prefixL++ ; 
                if(c == 'C') prefixLC += prefixL ; 
            }
        }

        return countLCT + ans ; 
    }
};
